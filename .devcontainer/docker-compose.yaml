version: '3'
services:
  db:
    image: postgres:13-alpine
    # ports:
    #   - "5432:5432"
    volumes: 
      - ../pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=password
  app:
    # Using a Dockerfile is optional, but included for completeness.
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
      args:
        # Update 'VARIANT' to pick a Ruby version: 2, 2.7, 2.6, 2.5
        VARIANT: 3
        USER_UID: 1000
        USER_GID: 1000
        INSTALL_NODE: true
        NODE_VERSION: lts/*

    volumes:
        # This is where VS Code should expect to find your project's source code and the value of "workspaceFolder" in .devcontainer/devcontainer.json
        - ..:/workspace:cached

        # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
        # - /var/run/docker.sock:/var/run/docker.sock 

    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"  

    # Runs app on the same network as the service container, allows "forwardPorts" in devcontainer.json function.
    network_mode: service:db

    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally. 
    # (Adding the "ports" property to this file will not forward from a Codespace.)

    # Uncomment the next line to use a non-root user for all processes - See https://aka.ms/vscode-remote/containers/non-root for details.
    # user: vscode

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    # cap_add:
    #   - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined
